install.packages("datasauRus")
library(datasauRus)
ggplot(datasaurus_dozen,aes(x=x,y=y,colour=dataset))+geom_point()+theme_void()+theme(legend.position = "none")+facet_wrap(~dataset,ncol=3)
library(tidyverse)
library(skimr)
library(janitor)
hotel_bookings <- read_csv("hotel_bookings.csv")
hotel_bookings <- read_csv("hotel_bookings.csv")
head(hotel_bookings)
glimpse(hotel_bookings)
str(hotel_bookings)
glimpse(hotel_bookings)
colnames(hotel_bookings)
arrange(hotel_bookings, "lead_time")
arrange(hotel_bookings, lead_time)
arrange(hotel_bookings, arrival_date_week_number)
arranged <- arrange(hotel_bookings, arrival_date_week_number)
View(arranged)
View(arranged)
arranged <- arrange(hotel_bookings, lead_time)
View(arranged)
View(arranged)
arrange(hotel_bookings, desc(lead_time))
hotel_bookings_v2 <-
arrange(hotel_bookings, desc(lead_time))
head(hotel_bookings_v2)
max(hotel_bookings$lead_time)
min(hotel_bookings$lead_time)
min(lead_time)
mean(hotel_bookings$lead_time)
mean(hotel_bookings_v2$lead_time)
hotel_bookings_city <- hotel_bookings %>%
filter(hotel=="City Hotel")
View(hotel_bookings_city)
View(hotel_bookings_city)
View(hotel_bookings)
View(hotel_bookings)
View(hotel_bookings_city)
View(hotel_bookings_city)
head(hotel_bookings_city)
mean(hotel_bookings_city$lead_time)
hotel_summary <-
hotel_bookings %>%
group_by(hotel) %>%
summarise(average_lead_time=mean(lead_time),
min_lead_time=min(lead_time),
max_lead_time=max(lead_time))
View(hotel_summary)
View(hotel_summary)
head(hotel_summary)
x1 <- 11
# Nested version with arbitrarily many options
if (x1 < 10) {
"A"
} else if (x1 < 20) {
"B"
} else {
"C"
}
# Evaluating entire vector instead of a scalar
v1 <- seq(1,10)
ans <- ifelse(v1 / 2 == 4, "Here", "Nope")
ans
colorMapper <- function(x) {
switch(x,
red = "#FF0000",
green = "#00FF00",
blue = "#0000FF",
stop("Invalid color name")
)
}
colorMapper('red')
colorMapper('tree')
BiocManager::install("apeglm")
library(apeglm)
library(NOISeq)
library(DESeq2)
load("~/bioinformatic_pipelines/class_1/GSE198256_step1.Rda")
GSE198256_DESeq2 <- DESeqDataSetFromMatrix(countData = GSE198256_count_filt,
colData = pData(data_NOISEQ),
design = ~ Group)
# Warning
#renaming the different groups (because of the previous warning) and defining data to work with
pDataUSE <- pData(data_NOISEQ)
pDataUSE[pDataUSE=="Covid19: Acute infection"] <- "Covid19AI"
pDataUSE[pDataUSE=="Covid19: Recovery 3Mo"] <- "Covid193Mo"
pDataUSE[pDataUSE=="Covid19: Recovery 6Mo"] <- "Covid196Mo"
str(pDataUSE)
#this last line of code converts the first column (containing the groups) into a factors or categories
pDataUSE[,1] <- as.factor(pDataUSE[,1])
resultsNames(GSE198256_DESeq2)
str(GSE198256_DESeq2)
#The code below filters the count matrix and keep only genes that have counts greater than or
#equal to 10 in at least six samples
smallestGroupSize <- 6
#The code below filters the count matrix and keep only genes that have counts greater than or
#equal to 10 in at least six samples
smallestGroupSize <- 6
keep <- rowSums(counts(GSE198256_DESeq2) >= 10) >= smallestGroupSize
#Once the filter criteria is ready, we can create a modified df containing genes of interest.
GSE198256_DESeq2_F <- GSE198256_DESeq2[keep,]
GSE198256_DESeq2_F<- DESeq(GSE198256_DESeq2_F)
GSE198256_res <- results(GSE198256_DESeq2_F)
GSE198256_res
resultsNames(GSE198256_DESeq2_F)
plotMA(GSE198256_res, ylim=c(-2,2))
lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Healthy_vs_Covid193Mo"))
res_lfcShrink <- lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Covid196Mo_vs_Covid193Mo"))
plotMA(res_lfcShrink, ylim=c(-2,2))
lfcShrink(GSE198256_DESeq2_F,coef=c("Group_HealthyvsCovid193Mo"))
lfcShrink(GSE198256_DESeq2_F,coef=c("Group Healthy_vs_Covid193Mo"))
_
lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Healthy_vs_Covid193Mo"))
resultsNames(GSE198256_DESeq2_F)
GSE198256_DESeq2_F<- DESeq(GSE198256_DESeq2_F)
#res <- results(GSE198256_DESeq2_F, contrast=c('factorName','numeratorLevel','denominatorLevel'))
res <- results(GSE198256_DESeq2_F, contrast=c("Group","Healthy","Covid19AI"))
res
#res <- results(GSE198256_DESeq2_F, contrast=c('factorName','numeratorLevel','denominatorLevel'))
res <- results(GSE198256_DESeq2_F, contrast=c("Group","Healthy","Covid19AI"))
resultsNames(GSE198256_DESeq2_F)
lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Healthy_vs_Covid19..Acute.infection"))
myRPKM = rpkm(assayData(data_NOISEQ)$exprs, long = lengthuse, k = 0, lc = 1)
######
library(NOISeq)
myRPKM = rpkm(assayData(data_NOISEQ)$exprs, long = lengthuse, k = 0, lc = 1)
####
##assigning values to length, gc content and chr # to use NOISEQ
####
lengthuse <- abs(annotgene_ord$end-annotgene_ord$start)
names(lengthuse) <- rownames(annotgene_ord)
gc <- annotgene_ord$GC
names(gc) <- rownames(annotgene_ord)
biotype <-annotgene_ord$type
names(biotype) <- rownames(annotgene_ord)
chromosome <- annotgene_ord[,c("Chromosome","start","end")]
data_NOISEQ <- readData(data = GSE198256_count_filt,
length=lengthuse,
gc=gc,
biotype= biotype ,
chromosome = annotgene_ord[,c("Chromosome","start","end")],
factors = Factors_GSE198256)
#to determine the presence of contaminant RNA
myexplodata <- dat(data_NOISEQ, type = "biodetection")
explo.plot(myexplodata, plottype = "persample")
#same as above but comparing 2 samples
par(mfrow = c(1, 2))
explo.plot(myexplodata, samples = c(1, 2), toplot = "protein_coding", plottype = "comparison")
#to check the number of counts per biotype and its distribution
mycountsbio = dat(data_NOISEQ, factor = NULL, type = "countsbio")
explo.plot(mycountsbio, toplot = 1, samples = 1, plottype = "boxplot")
## 1) saturation curve showing the behavior of sequence depth related to the discovery of new features
## 2) Comparison of newly discovered features between 4 differente samples
mysaturation = dat(data_NOISEQ, k = 0, ndepth = 7, type = "saturation")
explo.plot(mysaturation, toplot = 1, samples = 1:2, yleftlim = NULL, yrightlim = NULL)
explo.plot(mysaturation, toplot = "protein_coding", samples = 1:4)
#shows the distribution of counts of the biotype protein coding
explo.plot(mycountsbio, toplot = "protein_coding", samples = NULL, plottype = "boxplot")
#Visualize the features with low count per sample to decide a potential removal threshold
explo.plot(mycountsbio, toplot = 1, samples = NULL, plottype = "barplot")
#explore if lenght of the features introduce bias to the analysis
mylengthbias = dat(data_NOISEQ, factor = "Group", type = "lengthbias")
explo.plot(mylengthbias, samples = NULL, toplot = "global")
#explore if GC content of the features introduce bias to the analysis
myGCbias = dat(data_NOISEQ, factor = "Group", type = "GCbias")
explo.plot(myGCbias, samples = NULL, toplot = "global")
#comparison of read distribution per feature of 12 samples against a reference
mycd = dat(data_NOISEQ, type = "cd", norm = FALSE, refColumn = 1)
explo.plot(mycd,samples = 1:12)
#create a PCA and general QC
myPCA = dat(data_NOISEQ, type = "PCA")
explo.plot(myPCA, factor = "Group")
QCreport(data_NOISEQ, samples = NULL, factor = "Group", norm = FALSE)
myRPKM = rpkm(assayData(data_NOISEQ)$exprs, long = lengthuse, k = 0, lc = 1)
myUQUA = uqua(assayData(data_NOISEQ)$exprs, long = lengthuse, lc = 0.5, k = 0)
myTMM = tmm(assayData(data_NOISEQ)$exprs, long = 1000, lc = 0)
GSE198256_DESeq2 <- DESeqDataSetFromMatrix(countData = GSE198256_count_filt,
colData = pData(data_NOISEQ),
design = ~ Group)
# Warning
#renaming the different groups (because of the previous warning) and defining data to work with
pDataUSE <- pData(data_NOISEQ)
pDataUSE[pDataUSE=="Covid19: Acute infection"] <- "Covid19AI"
pDataUSE[pDataUSE=="Covid19: Recovery 3Mo"] <- "Covid193Mo"
pDataUSE[pDataUSE=="Covid19: Recovery 6Mo"] <- "Covid196Mo"
str(pDataUSE)
#this last line of code converts the first column (containing the groups) into a factors or categories
pDataUSE[,1] <- as.factor(pDataUSE[,1])
GSE198256_DESeq2 <- DESeqDataSetFromMatrix(countData = GSE198256_count_filt,
colData = pDataUSE,
design = ~ -1 + Group)
resultsNames(GSE198256_DESeq2)
GSE198256_DESeq2 <- DESeqDataSetFromMatrix(countData = GSE198256_count_filt,
colData = pDataUSE,
design = ~ Group)
str(GSE198256_DESeq2)
#The code below filters the count matrix and keep only genes that have counts greater than or
#equal to 10 in at least six samples
smallestGroupSize <- 6
keep <- rowSums(counts(GSE198256_DESeq2) >= 10) >= smallestGroupSize
#Once the filter criteria is ready, we can create a modified df containing genes of interest.
GSE198256_DESeq2_F <- GSE198256_DESeq2[keep,]
GSE198256_DESeq2_F<- DESeq(GSE198256_DESeq2_F)
GSE198256_res <- results(GSE198256_DESeq2_F)
GSE198256_res
resultsNames(GSE198256_DESeq2_F)
plotMA(GSE198256_res, ylim=c(-2,2))
lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Healthy_vs_Covid193Mo"))
res_lfcShrink <- lfcShrink(GSE198256_DESeq2_F,coef=c("Group_Covid196Mo_vs_Covid193Mo"))
plotMA(res_lfcShrink, ylim=c(-2,2))
resultsNames(GSE198256_DESeq2)
resultsNames(GSE198256_DESeq2_F)
resultsNames(GSE198256_DESeq2)
GSE198256_DESeq2_F<- DESeq(GSE198256_DESeq2_F)
#res <- results(GSE198256_DESeq2_F, contrast=c('factorName','numeratorLevel','denominatorLevel'))
res <- results(GSE198256_DESeq2_F, contrast=c("Group","Healthy","Covid19AI"))
res
resultsNames(GSE198256_DESeq2_F)
GSE198256_res
resultsNames(GSE198256_DESeq2_F)
resultsNames(GSE198256_DESeq2_F)
GSE198256_DESeq2_F<- DESeq(GSE198256_DESeq2_F)
#res <- results(GSE198256_DESeq2_F, contrast=c('factorName','numeratorLevel','denominatorLevel'))
res <- results(GSE198256_DESeq2_F, contrast=c("Group","Healthy","Covid19AI"))
res
resultsNames(GSE198256_DESeq2_F)
#res <- results(GSE198256_DESeq2_F, contrast=c('factorName','numeratorLevel','denominatorLevel'))
res <- results(GSE198256_DESeq2_F, contrast=c("Group","Healthy","Covid19AI"))
res
resultsNames(GSE198256_DESeq2_F)
resultsNames(GSE198256_DESeq2_F)
GSE198256_res
save.image("~/bioinformatic_pipelines/class_1/.RData")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(pressure)
## loading libraries
library(R.utils)
library(BiocManager)
library(DESeq2)
library(GEOquery)
library(NOISeq)
library(apeglm)
library(DESeq2)
## loading libraries
library(R.utils)
library(BiocManager)
library(DESeq2)
library(GEOquery)
library(NOISeq)
library(apeglm)
library(DESeq2)
library(R.utils)
library(BiocManager)
library(DESeq2)
library(GEOquery)
library(NOISeq)
library(apeglm)
library(DESeq2)
library(R.utils)
library(BiocManager)
library(DESeq2)
library(GEOquery)
library(NOISeq)
library(apeglm)
library(DESeq2)
summary(cars)
plot(pressure)
library(R.utils)
library(BiocManager)
library(DESeq2)
library(GEOquery)
library(NOISeq)
library(apeglm)
library(DESeq2)
summary(cars)
plot(pressure)
setwd("C:/Users/danie/OneDrive/Documents/bioinformatic_pipelines/class_1/hw_1")
getwd()
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
setwd("C:/Users/danie/OneDrive/Documents/bioinformatic_pipelines/class_1/hw_1")
getwd()
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
View(GSE198533_count)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE198256", "file=GSE198256_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
GSE198256_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
rm(GSE198256_count)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE198256", "file=GSE198256_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
GSE198256_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
rm(GSE198256_count)
GSE198256_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
View(GSE198256_count)
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T,), rownames=1)
GSE198533_count <- as.matrix(data.table::fread(path, header=T), rownames=1)
df$float_col <- as.integer(df$float_col)
View(GSE198533_count)
View(GSE198256_count)
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep=",");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
View(GSE198533_count)
View(GSE198256_count)
GSE198533_count[5:20]
GSE198533_count[5:21]
GSE198533_count[5:22]
GSE198533_count[5:23]
GSE198533_count[5, 20]
GSE198533_count[5, 19]
GSE198533_count[5, 18]
GSE198533_count[5, 20]
GSE198533_count[5, 30]
GSE198533_count[5, 20]
GSE198533_count[5, 34]
GSE198533_count[5, 33]
GSE198533_count[5, 34]
GSE198533_count[5, 35]
GSE198533_count[5, 36]
GSE198533_count[5, 39]
GSE198533_count[5, 38]
GSE198533_count[5, 39]
updated_matrix <- GSE198533_count[, -c(20:38)]
View(updated_matrix)
rm(GSE198256_count)
View(GSE198533_count)
GSE198533_count <- GSE198533_count[, -c(20:38)]
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE198256", "file=GSE198256_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
GSE198256_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
rm(GSE198256_count)
GSE198256_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE198533&format=file&file=GSE198533%5FRaw%5Fgene%5Fcounts%5Fmatrix%2Ecsv%2Egz"
path <- paste(urld, "acc=GSE198533", "GSE198533_Raw_gene_counts_matrix.csv.gz", sep="&");
GSE198533_count <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames=1)
GSE198533_count <- GSE198533_count[, -c(20:38)]
gds <- getGEO("GSE198533")
gds <- getGEO("GSE198533")
Meta_GSE198256 <- pData(gds$GSE198256_series_matrix.txt.gz@phenoData)
Meta_GSE198533 <- pData(gds$GSE198533_series_matrix.txt.gz@phenoData)
Meta_GSE198533 <- Meta_GSE198533[,c("title","source_name_ch1","characteristics_ch1","characteristics_ch1.1","description","cell type:ch1","disease state:ch1")]
rm(Meta_GSE198533)
str(gds)
gds@experimentData
str(gds)
View(gds)
View(gds)
gds <- getGEO("GSE198256")
View(gds)
gds <- getGEO("GSE198533")
Meta_GSE198533 <- pData(gds$GSE198533_series_matrix.txt.gz@phenoData)
rm(updated_matrix)
Meta_GSE198533 <- pData(gds$GSE198533_series_matrix.txt.gz@phenoData)
View(Meta_GSE198533)
("GSE198256")
gds <- getGEO("GSE198256")
Meta_GSE198256 <- pData(gds$GSE198256_series_matrix.txt.gz@phenoData)
View(Meta_GSE198256)
Meta_GSE198533 <- Meta_GSE198533[,c("title","source_name_ch1","characteristics_ch1","characteristics_ch1.1","condition:ch1")]
Meta_GSE198533 <- Meta_GSE198533[,c("title","source_name_ch1","characteristics_ch1","characteristics_ch1.1","condition:ch1")]
Meta_GSE198256 <- Meta_GSE198256[,c("title","source_name_ch1","characteristics_ch1","characteristics_ch1.1","description","cell type:ch1","disease state:ch1")]
Factors_GSE198256 <- Meta_GSE198256[,c("condition:ch1")]
Factors_GSE198533 <- Meta_GSE198256[,c("condition:ch1")]
Factors_GSE198533 <- Meta_GSE198533[,c("condition:ch1")]
rm(GSE198256_count)
rm(Meta_GSE198256)
View(GSE198533_count)
View(Meta_GSE198533)
write.table(rownames(GSE198533_count),"gene_names.txt",
col.names = FALSE,row.names = FALSE,quote=F)
annotgene <- read.csv("mart_export.txt",sep="\t",header = T)
View(annotgene)
write.table(rownames(GSE198533_count),"gene_names.txt",
col.names = FALSE,row.names = FALSE,quote=F)
annotgene <- read.csv("mart_export.txt",sep="\t",header = T)
View(annotgene)
# How many genes do I get annotated?
sum(rownames(GSE198256_count) %in% annotgene$Entrezgene)
# How many genes do I get annotated?
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
rownames(GSE198533_count)
sum(rownames(GSE198533_count))
# How many genes do I get annotated?
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
# Filter the information so only contains annotated gene in ch 1-22 and x, y
annotgene <- annotgene[annotgene$Chromosome.scaffold.name %in% c(as.character(1:22) ,"X","Y"),]
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
## Annotation... solving some issues...
#so when setting Entrezgene as rownames, the system does not allow them to have duplicate names and you get a warning message
#this can be used to detect duplicate entries.
rownames(annotgene) <- annotgene$Entrezgene
# How many genes do I get annotated?
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
# Filter the information so only contains annotated gene in ch 1-22 and x, y
annotgene <- annotgene[annotgene$Chromosome.scaffold.name %in% c(as.character(1:22) ,"X","Y"),]
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
## Annotation... solving some issues...
#so when setting Entrezgene as rownames, the system does not allow them to have duplicate names and you get a warning message
#this can be used to detect duplicate entries.
rownames(annotgene) <- annotgene$Gene.stable.ID
View(annotgene)
duplicated(annotgene$Gene.stable.ID)
if (any(duplicated(annotgene$Gene.stable.ID))) {
cat ("there are duplicates", "\n")
} else {
cat("There are no duplicates in column", column_index, "\n")
}
if (any(duplicated(annotgene$Gene.stable.ID))) {
cat ("there are duplicates", "\n")
} else {
cat("There are no duplicates in column", "\n")
}
any(duplicated(annotgene$Gene.stable.ID))
sum(rownames(GSE198533_count) %in% annotgene$Gene.stable.ID)
## Checking for duplicates and assigning new row names to the annotated data
any(duplicated(annotgene$Gene.stable.ID))
rownames(annotgene) <- annotgene$Gene.stable.ID
## Overlap between annotation and gnes
#assign gene id as row names for the filtered df
sum(as.character(rownames(annotgene)) %in% rownames(GSE198533_count))
##  Work with the annotated genes!
#for this code 3 df are created: 1) containing those genes in the count table that matches with the filtered annotated data
#and 2) the excluded genes from the count table and 3) contains ordered data in filtered annotation that match with the
#contained in my filtered count table.
GSE198533_count_filt <- GSE198533_count[rownames(GSE198533_count) %in% rownames(annotgene),]
annotgene_ord <- annotgene[rownames(GSE198256_count_filt),]
annotgene_ord <- annotgene[rownames(GSE198256_count_filt ),]
annotgene_ord <- annotgene[rownames(GSE198533_count_filt ),]
sum(rownames(annotgene_ord)==rownames(GSE198256_count_filt))
sum(rownames(annotgene_ord)==rownames(GSE198533_count_filt))
View(annotgene_ord)
View(GSE198533_count_filt)
View(GSE198533_count)
sum(rownames(annotgene_ord)==rownames(GSE198533_count_filt))
(rownames(annotgene_ord)==rownames(GSE198533_count_filt))
sum
sum(rownames(annotgene_ord)==rownames(GSE198533_count_filt))
Factors_GSE198533 <- data.frame(Meta_GSE198533 [ colnames(GSE198533_count_filt),c("condition:ch1")])
colnames(Factors_GSE198533)[1]<- "Group"
View(Factors_GSE198533)
Factors_GSE198533 <- data.frame(Meta_GSE198533 [colnames(GSE198533_count_filt),c("condition:ch1")])
colnames(Factors_GSE198533)[1]<- "Group"
Factors_GSE198533 <- data.frame(Meta_GSE198533 [colnames(GSE198533_count_filt),c(",condition:ch1")])
colnames(Factors_GSE198533)[1]<- "Group"
View(Factors_GSE198533)
Factors_GSE198533 <- data.frame(Meta_GSE198533 [colnames(GSE198533_count_filt),c("condition:ch1")])
colnames(Factors_GSE198533)[1]<- "Group"
data_NOISEQ <- readData(data = GSE198256_count_filt,
length=abs(annotgene_ord$end-annotgene_ord$start),
gc=annotgene_ord$GC,
biotype= annotgene_ord$type ,
chromosome = annotgene_ord[,c("Chromosome","start","end")],
factors = Factors_GSE198256)
View(Factors_GSE198533)
View(Meta_GSE198533)
View(GSE198533_count_filt)
View(Factors_GSE198533)
save.image("~/bioinformatic_pipelines/class_1/hw_1/parcial.RData")
base::load("~/bioinformatic_pipelines/class_1/.RData")
Factors_GSE198256 <- data.frame(Meta_GSE198256 [ colnames(GSE198256_count_filt),c("disease state:ch1")])
gds <- getGEO("GSE198256")
Meta_GSE198256 <- pData(gds$GSE198256_series_matrix.txt.gz@phenoData)
Meta_GSE198256 <- Meta_GSE198256[,c("title","source_name_ch1","characteristics_ch1","characteristics_ch1.1","description","cell type:ch1","disease state:ch1")]
Factors_GSE198256 <- data.frame(Meta_GSE198256 [ colnames(GSE198256_count_filt),c("disease state:ch1")])
View(Factors_GSE198256)
colnames(Factors_GSE198256)[1]<- "Group"
View(Factors_GSE198256)
View(GSE198256_count_filt)
colnames(Factors_GSE198256)[1]<- "Group"
data_NOISEQ <- readData(data = GSE198256_count_filt,
length=abs(annotgene_ord$end-annotgene_ord$start),
gc=annotgene_ord$GC,
biotype= annotgene_ord$type ,
chromosome = annotgene_ord[,c("Chromosome","start","end")],
factors = Factors_GSE198256)
View(data_NOISEQ)
View(Factors_GSE198256)
Factors_GSE198256 <- data.frame(Meta_GSE198256 [ colnames(GSE198256_count_filt),c("disease state:ch1")])
colnames(Factors_GSE198256)[1]<- "Group"
base::load("~/bioinformatic_pipelines/class_1/hw_1/parcial.RData")
View(Factors_GSE198533)
View(Meta_GSE198533)
Factors_GSE198256 <- data.frame(Meta_GSE198256 [colnames(GSE198256_count_filt),Meta_GSE198533$`condition:ch1`])
Factors_GSE198256 <- data.frame(Meta_GSE198533[colnames(GSE198256_count_filt),Meta_GSE198533$`condition:ch1`])
Factors_GSE198256 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),Meta_GSE198533$`condition:ch1`])
View(Factors_GSE198533)
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),c("condition:ch1")])
colnames(Factors_GSE198533)[1]<- "Group"
View(Factors_GSE198533)
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),c("condition:ch1")])
View(Factors_GSE198533)
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),Meta_GSE198533$`condition:ch1`])
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),Meta_GSE198533$condition:ch1`])
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),Meta_GSE198533$condition:ch1])
Factors_GSE198533 <- data.frame(Meta_GSE198533[colnames(GSE198533_count_filt),Meta_GSE198533$condition:ch1])
View(Factors_GSE198533)
View(Factors_GSE198533)
View(Factors_GSE198533)
colnames(Factors_GSE198533)[1]<- "Group"
